Comandos de Navegaci√≥n y Gesti√≥n de Archivos en la Consola


pwd (Print Working Directory): üìç Muestra la ruta completa del directorio actual en el que te encuentras.
ls (List): listdir Lista el contenido del directorio actual (archivos y carpetas).
ls -l: Muestra una lista detallada (permisos, propietario, tama√±o, fecha de modificaci√≥n).
ls -a: Muestra todos los archivos, incluyendo los ocultos (aquellos que empiezan con un punto, como .git).
cd [directorio] (Change Directory): ‚û°Ô∏è Cambia al directorio especificado.
cd ..: Sube un nivel (al directorio padre).
cd ~ o cd: Va a tu directorio "home" (inicio).
cd /: Va al directorio ra√≠z del sistema.
cd nombre_directorio: Entra a una carpeta dentro del directorio actual.
cd "nombre con espacios": Para directorios con espacios en el nombre, usa comillas.
mkdir [nombre_directorio] (Make Directory): üìÇ Crea un nuevo directorio.
rmdir [nombre_directorio] (Remove Directory): üóëÔ∏è Elimina un directorio vac√≠o. Para eliminar directorios con contenido, usa rm -r.
rm [archivo] (Remove): ‚ùå Elimina un archivo.
rm -r [directorio]: Elimina un directorio y todo su contenido (¬°√∫salo con mucho cuidado!).
rm -f [archivo]: Fuerza la eliminaci√≥n sin pedir confirmaci√≥n (¬°a√∫n m√°s cuidado!).
cp [origen] [destino] (Copy): üêë Copia archivos o directorios.
cp archivo.txt copia_archivo.txt: Copia un archivo.
cp -r directorio/ nuevo_directorio/: Copia un directorio y su contenido.
mv [origen] [destino] (Move): üöö Mueve o renombra archivos o directorios.
mv archivo.txt nuevo_nombre.txt: Renombra un archivo.
mv archivo.txt directorio/: Mueve un archivo a un directorio.
mv directorio/ otro_lugar/: Mueve un directorio.
touch [archivo] : ‚ú® Crea un archivo vac√≠o si no existe, o actualiza su fecha de modificaci√≥n si ya existe.
cat [archivo] (Concatenate): üìú Muestra el contenido de un archivo en la consola. Tambi√©n se puede usar para unir archivos.
less [archivo] o more [archivo]: üìÑ Muestra el contenido de un archivo de forma paginada, permiti√©ndote navegar por √©l (√∫til para archivos grandes). Presiona q para salir.
head [archivo]: üîù Muestra las primeras l√≠neas de un archivo. Por defecto, 10 l√≠neas.
head -n 5 archivo.txt: Muestra las primeras 5 l√≠neas.
tail [archivo]: üîö Muestra las √∫ltimas l√≠neas de un archivo. Por defecto, 10 l√≠neas.
tail -n 5 archivo.txt: Muestra las √∫ltimas 5 l√≠neas.
tail -f archivo.log: Muestra las √∫ltimas l√≠neas y sigue mostrando las nuevas l√≠neas que se a√±aden al archivo en tiempo real (muy √∫til para ver logs).
clear: üßπ Limpia la pantalla de la consola.
history: ‚è™ Muestra un historial de los comandos que has ejecutado.
man [comando] (Manual): üìñ Muestra la p√°gina del manual para un comando espec√≠fico, donde encontrar√°s informaci√≥n detallada sobre su uso y opciones.
echo "[texto]": üó£Ô∏è Muestra un texto en la consola. √ötil para scripts o para mostrar el valor de variables.
echo "Hola Mundo" > archivo.txt: Escribe "Hola Mundo" en archivo.txt (sobrescribe el contenido).
echo "Otra l√≠nea" >> archivo.txt: A√±ade "Otra l√≠nea" al final de archivo.txt



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

COMADOS DE GIT BASH

git init: üèÅ Inicializa un nuevo repositorio de Git en el directorio actual. Es el primer comando que usas cuando empiezas un nuevo proyecto con Git.
git clone [URL]: üêë Copia un repositorio existente desde una URL a tu m√°quina local.
git add [archivo]: ‚ûï A√±ade cambios de un archivo al √°rea de preparaci√≥n (staging area). Puedes usar git add . para a√±adir todos los archivos modificados y nuevos.
git commit -m "[mensaje]": üíæ Guarda los cambios preparados en el historial del repositorio con un mensaje descriptivo.
git status: üìä Muestra el estado de los archivos en el directorio de trabajo y en el √°rea de preparaci√≥n (archivos modificados, preparados, sin seguimiento, etc.).
git log: üìú Muestra el historial de commits del repositorio.
git pull: üì• Obtiene los √∫ltimos cambios del repositorio remoto y los fusiona (merge) con tu rama actual. Es una combinaci√≥n de git fetch y git merge.
git push: üì§ Env√≠a tus commits locales al repositorio remoto.
git branch: üåø Lista todas las ramas locales. Con git branch [nombre-rama] creas una nueva rama. Con git branch -d [nombre-rama] eliminas una rama.
git checkout [nombre-rama]: ‚áÜ Cambia a una rama diferente. Tambi√©n se usa para restaurar archivos del directorio de trabajo (git checkout -- [archivo]).
git merge [nombre-rama]: ü§ù Fusiona los cambios de una rama espec√≠fica en tu rama actual.
git remote -v: üåê Lista los repositorios remotos configurados junto con sus URLs. Con git remote add [nombre] [URL] a√±ades un nuevo remoto.
git fetch: üöö Descarga los cambios de un repositorio remoto pero no los fusiona autom√°ticamente en tu rama actual. Te permite revisar los cambios antes de integrarlos.
git diff: üëÄ Muestra las diferencias entre los archivos que a√∫n no has preparado. git diff --staged muestra las diferencias entre los archivos preparados y el √∫ltimo commit.
git reset [archivo]: ‚Ü©Ô∏è Saca un archivo del √°rea de preparaci√≥n, pero mantiene los cambios en tu directorio de trabajo. git reset --hard descarta todos los cambios desde el √∫ltimo commit. (¬°√ösalo con cuidado!).
git stash: üì¶ Guarda temporalmente los cambios que no est√°n listos para ser commiteados, permiti√©ndote cambiar de rama o trabajar en otra cosa. git stash pop aplica los cambios guardados y los elimina del stash.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

COMADOS MAS USADOS EN CYPRESS



Estos comandos forman el n√∫cleo de la interacci√≥n con la aplicaci√≥n y la validaci√≥n de su comportamiento.

1. Comandos de Navegaci√≥n y Visita
cy.visit(url)

Descripci√≥n: Navega a una URL espec√≠fica. Es el punto de partida para la mayor√≠a de las pruebas.
Ejemplo:
JavaScript

cy.visit('https://www.ejemplo.com/login');
cy.go(direction)

Descripci√≥n: Navega hacia adelante o hacia atr√°s en el historial del navegador.
Ejemplo:
JavaScript

cy.go('back'); // Navega hacia atr√°s
cy.go('forward'); // Navega hacia adelante
cy.reload()

Descripci√≥n: Recarga la p√°gina actual. √ötil para restablecer el estado o verificar el comportamiento despu√©s de una acci√≥n.
Ejemplo:
JavaScript

cy.reload();
2. Comandos de Selecci√≥n y Consulta de Elementos
Estos son esenciales para encontrar elementos con los que interactuar en la p√°gina. Siempre prioriza el uso de selectores robustos como data-cy, data-testid, IDs o clases √∫nicas y estables.

cy.get(selector)

Descripci√≥n: Obtiene uno o m√°s elementos del DOM que coinciden con un selector CSS. Es el comando m√°s fundamental para seleccionar elementos.
Ejemplo:
JavaScript

cy.get('input[name="username"]'); // Por atributo name
cy.get('#login-button'); // Por ID
cy.get('.product-card'); // Por clase
cy.get('[data-cy="submit-button"]'); // Por atributo data-cy (¬°recomendado!)
cy.contains(selector, content)

Descripci√≥n: Obtiene el primer elemento del DOM que contiene el texto especificado. Puede combinarse con un selector para ser m√°s espec√≠fico.
Ejemplo:
JavaScript

cy.contains('Bienvenido'); // Encuentra un elemento con el texto "Bienvenido"
cy.contains('h1', 'T√≠tulo de P√°gina'); // Encuentra un <h1> con el texto "T√≠tulo de P√°gina"
cy.get('.error-message').contains('Campo requerido'); // Encadenado: encuentra el mensaje de error que contiene "Campo requerido"
3. Comandos de Interacci√≥n con Elementos
Una vez que has seleccionado un elemento, estos comandos te permiten simular la interacci√≥n del usuario.

cy.click()

Descripci√≥n: Hace clic en el elemento encontrado previamente.
Ejemplo:
JavaScript

cy.get('[data-cy="login-button"]').click();
cy.type(text)

Descripci√≥n: Escribe texto en un campo de entrada, √°rea de texto, etc.
Ejemplo:
JavaScript

cy.get('#username').type('miusuario');
cy.get('#password').type('micontrase√±a{enter}'); // {enter} para simular presionar Enter
cy.clear()

Descripci√≥n: Borra el contenido de un campo de entrada o √°rea de texto.
Ejemplo:
JavaScript

cy.get('#search-input').clear();
cy.check()

Descripci√≥n: Marca un checkbox o un radio button.
Ejemplo:
JavaScript

cy.get('#terms-checkbox').check();
cy.uncheck()

Descripci√≥n: Desmarca un checkbox.
Ejemplo:
JavaScript

cy.get('#newsletter-subscription').uncheck();
cy.select(value)

Descripci√≥n: Selecciona una opci√≥n en un <select> dropdown por su valor, texto o √≠ndice.
Ejemplo:
JavaScript

cy.get('#country-select').select('ES'); // Por valor
cy.get('#country-select').select('Espa√±a'); // Por texto
cy.get('#country-select').select(0); // Por √≠ndice (primera opci√≥n)
cy.focus() / cy.blur()

Descripci√≥n: Simula el enfoque y desenfoque de un elemento. √ötil para probar comportamientos al interactuar con formularios.
Ejemplo:
JavaScript

cy.get('#username').focus();
cy.get('#username').blur();
4. Comandos de Aserci√≥n (Validaci√≥n)
Las aserciones son cruciales para verificar que el estado de la aplicaci√≥n es el esperado despu√©s de una serie de acciones. Cypress utiliza la sintaxis de Chai y jQuery.

should(chainers)

Descripci√≥n: Realiza una aserci√≥n sobre el sujeto anterior de la cadena de comandos. Es la forma m√°s com√∫n de validar en Cypress.
Ejemplo:
JavaScript

cy.get('.success-message').should('be.visible'); // El elemento debe ser visible
cy.get('#item-count').should('have.text', '5'); // El elemento debe tener el texto "5"
cy.get('input[name="email"]').should('have.value', 'test@example.com'); // El input debe tener ese valor
cy.url().should('include', '/dashboard'); // La URL debe incluir "/dashboard"
cy.get('.item').should('have.length', 3); // Debe haber 3 elementos con la clase "item"
cy.get('#submit-button').should('be.disabled'); // El bot√≥n debe estar deshabilitado
and(chainers)

Descripci√≥n: Encadena m√∫ltiples aserciones sobre el mismo sujeto.
Ejemplo:
JavaScript

cy.get('.alert').should('be.visible').and('contain.text', 'Operaci√≥n exitosa');
expect(subject).to.be... / expect(subject).to.have...

Descripci√≥n: Permite hacer aserciones de forma m√°s expl√≠cita utilizando la sintaxis de Chai. A menudo se usa con valores obtenidos de la aplicaci√≥n, no directamente con elementos del DOM.
Ejemplo:
JavaScript

cy.get('#item-count').invoke('text').then(text => {
    expect(parseInt(text)).to.be.greaterThan(0);
});
5. Comandos de Utilidad y Flujo de Control
cy.wait(duration) o cy.wait(alias)

Descripci√≥n: Pausa la ejecuci√≥n de la prueba por un tiempo espec√≠fico (en milisegundos) o espera que una petici√≥n de red con alias se complete. Se recomienda evitar cy.wait() por tiempo fijo y usar cy.wait(alias) para peticiones de red o aserciones que autom√°ticamente reintentan hasta que la condici√≥n se cumple.
Ejemplo:
JavaScript

cy.wait(2000); // Espera 2 segundos (¬°usar con precauci√≥n!)
cy.intercept('GET', '/api/users').as('getUsers');
cy.visit('/users');
cy.wait('@getUsers'); // Espera a que la petici√≥n getUsers se complete
cy.intercept(method, url, response)

Descripci√≥n: Permite interceptar, modificar y simular respuestas de peticiones de red (XHR/Fetch). Es incre√≠blemente poderoso para pruebas de integraci√≥n y para aislar componentes.
Ejemplo:
JavaScript

// Mockear una respuesta de API
cy.intercept('GET', '/api/products', { fixture: 'products.json' }).as('getProducts');
cy.visit('/products');
cy.wait('@getProducts');

// Simular un error de API
cy.intercept('POST', '/api/order', { statusCode: 500, body: { error: 'Server Error' } }).as('postOrderError');
cy.request(method, url, body)

Descripci√≥n: Realiza una petici√≥n HTTP directamente desde Cypress. Es √∫til para preparar datos de prueba, limpiar la base de datos o interactuar con APIs sin pasar por la interfaz de usuario.
Ejemplo:
JavaScript

cy.request('POST', '/api/reset-db'); // Reiniciar la base de datos antes de una prueba
cy.request('GET', '/api/users/1').its('body').then(user => {
    expect(user.name).to.equal('Juan');
});
cy.log(message)

Descripci√≥n: Imprime un mensaje en la consola de la prueba en el Test Runner de Cypress. √ötil para depuraci√≥n.
Ejemplo:
JavaScript

cy.log('Inicio de la prueba de inicio de sesi√≥n');
cy.fixture(filePath)

Descripci√≥n: Carga datos de un archivo de fixture (generalmente JSON). Ideal para datos de prueba est√°ticos y complejos.
Ejemplo:
JavaScript

cy.fixture('testUser.json').then(user => {
    cy.get('#username').type(user.username);
    cy.get('#password').type(user.password);
});
cy.screenshot(fileName)

Descripci√≥n: Toma una captura de pantalla. Las capturas se toman autom√°ticamente en caso de fallos, pero este comando permite tomarlas en puntos espec√≠ficos.
Ejemplo:
JavaScript

cy.get('.modal').screenshot('modal-visible');
Consejos Adicionales como Ingeniero QA Experto en Cypress:

Encadenamiento de Comandos: Cypress funciona con un patr√≥n de encadenamiento. Cada comando devuelve un "sujeto" sobre el cual puedes aplicar el siguiente comando.
Reintentos Autom√°ticos: Muchos comandos de Cypress (como cy.get(), cy.contains(), y las aserciones should()) reintentan autom√°ticamente durante un tiempo determinado hasta que el elemento aparece o la aserci√≥n se cumple. Esto reduce la necesidad de cy.wait() innecesarios.
Selectores Robustos: Insisto en el uso de data-cy, data-testid o IDs para seleccionar elementos. Son los m√°s estables y menos propensos a romperse con cambios en el CSS o la estructura del DOM.
Comandos Personalizados: Una vez que te familiarices con estos comandos b√°sicos, explora la creaci√≥n de Cypress.Commands.add() para encapsular l√≥gica repetitiva y mejorar la legibilidad y mantenibilidad de tus pruebas.



