COMANDOS MAS USADOS EN CYPRESS



Estos comandos forman el núcleo de la interacción con la aplicación y la validación de su comportamiento.

1. Comandos de Navegación y Visita
cy.visit(url)

Descripción: Navega a una URL específica. Es el punto de partida para la mayoría de las pruebas.
Ejemplo:
JavaScript

cy.visit('https://www.ejemplo.com/login');
cy.go(direction)

Descripción: Navega hacia adelante o hacia atrás en el historial del navegador.
Ejemplo:
JavaScript

cy.go('back'); // Navega hacia atrás
cy.go('forward'); // Navega hacia adelante
cy.reload()

Descripción: Recarga la página actual. Útil para restablecer el estado o verificar el comportamiento después de una acción.
Ejemplo:
JavaScript

cy.reload();
2. Comandos de Selección y Consulta de Elementos
Estos son esenciales para encontrar elementos con los que interactuar en la página. Siempre prioriza el uso de selectores robustos como data-cy, data-testid, IDs o clases únicas y estables.

cy.get(selector)

Descripción: Obtiene uno o más elementos del DOM que coinciden con un selector CSS. Es el comando más fundamental para seleccionar elementos.
Ejemplo:
JavaScript

cy.get('input[name="username"]'); // Por atributo name
cy.get('#login-button'); // Por ID
cy.get('.product-card'); // Por clase
cy.get('[data-cy="submit-button"]'); // Por atributo data-cy (¡recomendado!)
cy.contains(selector, content)

Descripción: Obtiene el primer elemento del DOM que contiene el texto especificado. Puede combinarse con un selector para ser más específico.
Ejemplo:
JavaScript

cy.contains('Bienvenido'); // Encuentra un elemento con el texto "Bienvenido"
cy.contains('h1', 'Título de Página'); // Encuentra un <h1> con el texto "Título de Página"
cy.get('.error-message').contains('Campo requerido'); // Encadenado: encuentra el mensaje de error que contiene "Campo requerido"
3. Comandos de Interacción con Elementos
Una vez que has seleccionado un elemento, estos comandos te permiten simular la interacción del usuario.

cy.click()

Descripción: Hace clic en el elemento encontrado previamente.
Ejemplo:
JavaScript

cy.get('[data-cy="login-button"]').click();
cy.type(text)

Descripción: Escribe texto en un campo de entrada, área de texto, etc.
Ejemplo:
JavaScript

cy.get('#username').type('miusuario');
cy.get('#password').type('micontraseña{enter}'); // {enter} para simular presionar Enter
cy.clear()

Descripción: Borra el contenido de un campo de entrada o área de texto.
Ejemplo:
JavaScript

cy.get('#search-input').clear();
cy.check()

Descripción: Marca un checkbox o un radio button.
Ejemplo:
JavaScript

cy.get('#terms-checkbox').check();
cy.uncheck()

Descripción: Desmarca un checkbox.
Ejemplo:
JavaScript

cy.get('#newsletter-subscription').uncheck();
cy.select(value)

Descripción: Selecciona una opción en un <select> dropdown por su valor, texto o índice.
Ejemplo:
JavaScript

cy.get('#country-select').select('ES'); // Por valor
cy.get('#country-select').select('España'); // Por texto
cy.get('#country-select').select(0); // Por índice (primera opción)
cy.focus() / cy.blur()

Descripción: Simula el enfoque y desenfoque de un elemento. Útil para probar comportamientos al interactuar con formularios.
Ejemplo:
JavaScript

cy.get('#username').focus();
cy.get('#username').blur();
4. Comandos de Aserción (Validación)
Las aserciones son cruciales para verificar que el estado de la aplicación es el esperado después de una serie de acciones. Cypress utiliza la sintaxis de Chai y jQuery.

should(chainers)

Descripción: Realiza una aserción sobre el sujeto anterior de la cadena de comandos. Es la forma más común de validar en Cypress.
Ejemplo:
JavaScript

cy.get('.success-message').should('be.visible'); // El elemento debe ser visible
cy.get('#item-count').should('have.text', '5'); // El elemento debe tener el texto "5"
cy.get('input[name="email"]').should('have.value', 'test@example.com'); // El input debe tener ese valor
cy.url().should('include', '/dashboard'); // La URL debe incluir "/dashboard"
cy.get('.item').should('have.length', 3); // Debe haber 3 elementos con la clase "item"
cy.get('#submit-button').should('be.disabled'); // El botón debe estar deshabilitado
and(chainers)

Descripción: Encadena múltiples aserciones sobre el mismo sujeto.
Ejemplo:
JavaScript

cy.get('.alert').should('be.visible').and('contain.text', 'Operación exitosa');
expect(subject).to.be... / expect(subject).to.have...

Descripción: Permite hacer aserciones de forma más explícita utilizando la sintaxis de Chai. A menudo se usa con valores obtenidos de la aplicación, no directamente con elementos del DOM.
Ejemplo:
JavaScript

cy.get('#item-count').invoke('text').then(text => {
    expect(parseInt(text)).to.be.greaterThan(0);
});
5. Comandos de Utilidad y Flujo de Control
cy.wait(duration) o cy.wait(alias)

Descripción: Pausa la ejecución de la prueba por un tiempo específico (en milisegundos) o espera que una petición de red con alias se complete. Se recomienda evitar cy.wait() por tiempo fijo y usar cy.wait(alias) para peticiones de red o aserciones que automáticamente reintentan hasta que la condición se cumple.
Ejemplo:
JavaScript

cy.wait(2000); // Espera 2 segundos (¡usar con precaución!)
cy.intercept('GET', '/api/users').as('getUsers');
cy.visit('/users');
cy.wait('@getUsers'); // Espera a que la petición getUsers se complete
cy.intercept(method, url, response)

Descripción: Permite interceptar, modificar y simular respuestas de peticiones de red (XHR/Fetch). Es increíblemente poderoso para pruebas de integración y para aislar componentes.
Ejemplo:
JavaScript

// Mockear una respuesta de API
cy.intercept('GET', '/api/products', { fixture: 'products.json' }).as('getProducts');
cy.visit('/products');
cy.wait('@getProducts');

// Simular un error de API
cy.intercept('POST', '/api/order', { statusCode: 500, body: { error: 'Server Error' } }).as('postOrderError');
cy.request(method, url, body)

Descripción: Realiza una petición HTTP directamente desde Cypress. Es útil para preparar datos de prueba, limpiar la base de datos o interactuar con APIs sin pasar por la interfaz de usuario.
Ejemplo:
JavaScript

cy.request('POST', '/api/reset-db'); // Reiniciar la base de datos antes de una prueba
cy.request('GET', '/api/users/1').its('body').then(user => {
    expect(user.name).to.equal('Juan');
});
cy.log(message)

Descripción: Imprime un mensaje en la consola de la prueba en el Test Runner de Cypress. Útil para depuración.
Ejemplo:
JavaScript

cy.log('Inicio de la prueba de inicio de sesión');
cy.fixture(filePath)

Descripción: Carga datos de un archivo de fixture (generalmente JSON). Ideal para datos de prueba estáticos y complejos.
Ejemplo:
JavaScript

cy.fixture('testUser.json').then(user => {
    cy.get('#username').type(user.username);
    cy.get('#password').type(user.password);
});
cy.screenshot(fileName)

Descripción: Toma una captura de pantalla. Las capturas se toman automáticamente en caso de fallos, pero este comando permite tomarlas en puntos específicos.
Ejemplo:
JavaScript

cy.get('.modal').screenshot('modal-visible');
Consejos Adicionales como Ingeniero QA Experto en Cypress:

Encadenamiento de Comandos: Cypress funciona con un patrón de encadenamiento. Cada comando devuelve un "sujeto" sobre el cual puedes aplicar el siguiente comando.
Reintentos Automáticos: Muchos comandos de Cypress (como cy.get(), cy.contains(), y las aserciones should()) reintentan automáticamente durante un tiempo determinado hasta que el elemento aparece o la aserción se cumple. Esto reduce la necesidad de cy.wait() innecesarios.
Selectores Robustos: Insisto en el uso de data-cy, data-testid o IDs para seleccionar elementos. Son los más estables y menos propensos a romperse con cambios en el CSS o la estructura del DOM.
Comandos Personalizados: Una vez que te familiarices con estos comandos básicos, explora la creación de Cypress.Commands.add() para encapsular lógica repetitiva y mejorar la legibilidad y mantenibilidad de tus pruebas.



